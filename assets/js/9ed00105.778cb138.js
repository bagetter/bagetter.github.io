"use strict";(self.webpackChunkba_getter=self.webpackChunkba_getter||[]).push([[4],{8373:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>l});var r=i(5893),s=i(1151);const t={},a="Configuration",o={id:"configuration",title:"Configuration",description:"You can modify BaGetter's configurations by editing the appsettings.json file.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/docs/configuration",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/configuration.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Run BaGetter on your Computer",permalink:"/docs/Installation/local"},next:{title:"Artifactory",permalink:"/docs/vs/artifactory"}},c={},l=[{value:"Require an API key",id:"require-an-api-key",level:2},{value:"Enable read-through caching",id:"enable-read-through-caching",level:2},{value:"Enable package hard deletions",id:"enable-package-hard-deletions",level:2},{value:"Enable package overwrites",id:"enable-package-overwrites",level:2},{value:"Private feeds",id:"private-feeds",level:2},{value:"Database configuration",id:"database-configuration",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"<code>appsettings.json</code>",id:"appsettingsjson",level:3},{value:"IIS server options",id:"iis-server-options",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["You can modify BaGetter's configurations by editing the ",(0,r.jsx)(n.code,{children:"appsettings.json"})," file."]}),"\n",(0,r.jsx)(n.h2,{id:"require-an-api-key",children:"Require an API key"}),"\n",(0,r.jsxs)(n.p,{children:["You can require that users provide a password, called an API key, to publish packages.\nTo do so, you can insert the desired API key in the ",(0,r.jsx)(n.code,{children:"ApiKey"})," field."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    "ApiKey": "NUGET-SERVER-API-KEY",\n    ...\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Users will now have to provide the API key to push packages:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c#",children:"dotnet nuget push -s http://localhost:5000/v3/index.json -k NUGET-SERVER-API-KEY package.1.0.0.nupkg\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enable-read-through-caching",children:"Enable read-through caching"}),"\n",(0,r.jsx)(n.p,{children:"Read-through caching lets you index packages from an upstream source. You can use read-through\ncaching to:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Speed up your builds if restores from ",(0,r.jsx)(n.a,{href:"https://nuget.org",children:"nuget.org"})," are slow"]}),"\n",(0,r.jsx)(n.li,{children:"Enable package restores in offline scenarios"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The following ",(0,r.jsx)(n.code,{children:"Mirror"})," setting configures BaGetter to index packages from ",(0,r.jsx)(n.a,{href:"https://nuget.org",children:"nuget.org"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    ...\n\n    "Mirror": {\n        "Enabled":  true,\n        "PackageSource": "https://api.nuget.org/v3/index.json"\n    },\n\n    ...\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["!!! info\n",(0,r.jsx)(n.code,{children:"PackageSource"})," is the value of the ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/nuget/api/service-index",children:"NuGet service index"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"enable-package-hard-deletions",children:"Enable package hard deletions"}),"\n",(0,r.jsxs)(n.p,{children:["To prevent the ",(0,r.jsx)(n.a,{href:"https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm",children:'"left pad" problem'}),",\nBaGetter's default configuration doesn't allow package deletions. Whenever BaGetter receives a package deletion\nrequest, it will instead \"unlist\" the package. An unlisted package is undiscoverable but can still be\ndownloaded if you know the package's id and version. You can override this behavior by setting the\n",(0,r.jsx)(n.code,{children:"PackageDeletionBehavior"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    ...\n\n    "PackageDeletionBehavior": "HardDelete",\n\n    ...\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"enable-package-overwrites",children:"Enable package overwrites"}),"\n",(0,r.jsxs)(n.p,{children:["Normally, BaGetter will reject a package upload if the id and version are already taken. You can configure BaGetter\nto overwrite the already existing package by setting ",(0,r.jsx)(n.code,{children:"AllowPackageOverwrites"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    ...\n\n    "AllowPackageOverwrites": true,\n\n    ...\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"private-feeds",children:"Private feeds"}),"\n",(0,r.jsx)(n.p,{children:"A private feed requires users to authenticate before accessing packages."}),"\n",(0,r.jsxs)(n.p,{children:["!!! warning\nPrivate feeds are not supported at this time! See ",(0,r.jsx)(n.a,{href:"https://github.com/loic-sharma/BaGet/pull/69",children:"this pull request"})," for more information."]}),"\n",(0,r.jsx)(n.h2,{id:"database-configuration",children:"Database configuration"}),"\n",(0,r.jsx)(n.p,{children:"BaGetter supports multiple database engines for storing package information:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["MySQL: ",(0,r.jsx)(n.code,{children:"MySql"})]}),"\n",(0,r.jsxs)(n.li,{children:["SQLite: ",(0,r.jsx)(n.code,{children:"Sqlite"})]}),"\n",(0,r.jsxs)(n.li,{children:["SQL Server: ",(0,r.jsx)(n.code,{children:"SqlServer"})]}),"\n",(0,r.jsxs)(n.li,{children:["PostgreSQL: ",(0,r.jsx)(n.code,{children:"PostgreSql"})]}),"\n",(0,r.jsxs)(n.li,{children:["Azure Table Storage: ",(0,r.jsx)(n.code,{children:"AzureTable"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Each database engine requires a connection string to configure the connection. Please refer to ",(0,r.jsx)(n.a,{href:"https://www.connectionstrings.com/",children:"ConnectionStrings.com"})," to learn how to create the proper connection string for each database engine."]}),"\n",(0,r.jsxs)(n.p,{children:["You may configure the chosen database engine either using environment variables or by editing the ",(0,r.jsx)(n.code,{children:"appsettings.json"})," file."]}),"\n",(0,r.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsx)(n.p,{children:"There are two environment variables related to database configuration. These are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database__Type"}),": The database engine to use, this should be one of the strings from the above list such as ",(0,r.jsx)(n.code,{children:"PostgreSql"})," or ",(0,r.jsx)(n.code,{children:"Sqlite"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Database__ConnectionString"}),": The connection string for your database engine."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"appsettingsjson",children:(0,r.jsx)(n.code,{children:"appsettings.json"})}),"\n",(0,r.jsxs)(n.p,{children:["The database settings are located under the ",(0,r.jsx)(n.code,{children:"Database"})," key in the ",(0,r.jsx)(n.code,{children:"appsettings.json"})," configuration file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    ...\n\n    "Database": {\n        "Type": "Sqlite",\n        "ConnectionString": "Data Source=bagetter.db"\n    },\n\n    ...\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"There are two settings related to the database configuration:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type"}),": The database engine to use, this should be one of the strings from the above list such as ",(0,r.jsx)(n.code,{children:"PostgreSql"})," or ",(0,r.jsx)(n.code,{children:"Sqlite"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ConnectionString"}),": The connection string for your database engine."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"iis-server-options",children:"IIS server options"}),"\n",(0,r.jsxs)(n.p,{children:["IIS Server options can be configured under the ",(0,r.jsx)(n.code,{children:"IISServerOptions"})," key. The available options are detailed at ",(0,r.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.iisserveroptions",children:"docs.microsoft.com"}),"\nNote: If not specified, the MaxRequestBodySize in BaGetter defaults to 250MB (262144000 bytes), rather than the ASP.NET Core default of 30MB"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n    ...\n\n    "IISServerOptions": {\n        "MaxRequestBodySize": 262144000\n    },\n\n    ...\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>a});var r=i(7294);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);